n = int(input())
grid = [list(map(int, input().strip())) for _ in range(n)]
 
# dp[i][j] will store the minimum sum of digits to reach cell (i, j) from cell (1, 1)
dp = [[0] * n for _ in range(n)]
dp[0][0] = grid[0][0]
 
# Initialize the first row and column of dp array
for i in range(1, n):
    dp[i][0] = dp[i-1][0] + grid[i][0]
    dp[0][i] = dp[0][i-1] + grid[0][i]
 
# Fill the rest of the dp array
for i in range(1, n):
    for j in range(1, n):
        dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1])
 
# Backtrack to find the minimum sum path
i, j = n-1, n-1
path = []
while i > 0 or j > 0:
    path.append((i, j))
    if i == 0:
        j -= 1
    elif j == 0:
        i -= 1
    elif dp[i-1][j] < dp[i][j-1]:
        i -= 1
    else:
        j -= 1
path.append((0, 0))
path.reverse()
 
# Construct the path on the grid
result = [['.'] * n for _ in range(n)]
for i, j in path:
    result[i][j] = '#'
 
# Print the result
for row in result:
    print(''.join(row))
